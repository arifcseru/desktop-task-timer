/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.timer.forms;

import com.timer.db.TaskTimerDBOperation;
import com.timer.tos.TaskTimerTO;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author BDTUNE
 */
public class SmallTimerFrame extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form SmallTimerFrame
     */
    int counter = 0;
    int xMouse;
    int yMouse;

    Integer taskTimeLeft;
    Integer totalTimeLimit;

    Timer clockTimer = new Timer(1000, (ActionListener) this);
    Timer timer = new Timer(1000, (ActionListener) this);

    Integer timeLimit;
    Integer min;
    Integer sec;
    Integer hr;
    TaskTimerDBOperation bOperation = new TaskTimerDBOperation();
    List<TaskTimerTO> taskTimerTOList;
    Integer selectedTaskId = TaskTimer.activeTaskId;

    public SmallTimerFrame() {
        initComponents();
        TaskTimer.activeTaskTimerWindow = "Minimum";
//        this.closeLabel.setVisible(false);
        this.setSize(300, 100);
        this.setLocation((int) (Toolkit.getDefaultToolkit().getScreenSize().getWidth() - this.getSize().getWidth() - 10), (int) (Toolkit.getDefaultToolkit().getScreenSize().getHeight() - this.getSize().getHeight() - 40));
        // System.out.println(TaskTimer.activeTaskId);
        taskTimerTOList = bOperation.retrieveLastFiveTasks();

        //System.out.println("Sel: "+selectedTaskId);
        clockTimer.start();
        if (selectedTaskId != 0) {
            timer.start();
            this.taskDetailsLabel.setText(this.taskTimerTOList.get(selectedTaskId - 1).getTaskDetails());
            this.totalTimeLimit = this.taskTimerTOList.get(selectedTaskId - 1).getTimeLimit();
            this.taskTimeLeft = this.taskTimerTOList.get(selectedTaskId - 1).getTimeLimit();
            this.startButton.setEnabled(false);
            this.stopButton.setEnabled(true);
        } else {
            // selectedTaskId = 1;
            //  this.taskTimeLeft = this.taskTimerTOList.get(selectedTaskId-1).getTimeLimit();
            this.startButton.setEnabled(false);
            this.stopButton.setEnabled(false);
            JOptionPane.showMessageDialog(null, "Mini TaskTimer (Active Task: " + TaskTimer.activeTaskId + ",isTimerStop: " + TaskTimer.isTimerStop + ")");

        }
        this.startButton.setEnabled(false);
        this.stopButton.setEnabled(false);
        if (TaskTimer.toBeActivatedTheme.equalsIgnoreCase("windows")) {
            backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/timer/pictures/backgroundImage_linux.gif"))); // NOI18N

        } else {
            backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/timer/pictures/backgroundImage.gif"))); // NOI18N

        }

    }

    private void updateTaskTimerRecords() {
        if (taskTimerTOList != null && TaskTimer.activeTaskId != 0) {
            taskTimerTOList.get(TaskTimer.activeTaskId - 1).setTimeLimit(taskTimeLeft);
            bOperation.updateTasks(taskTimerTOList);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        maximizeLabel = new javax.swing.JLabel();
        addLabel = new javax.swing.JLabel();
        closeLabel = new javax.swing.JLabel();
        minimizeLabel = new javax.swing.JLabel();
        taskTimeLeftLabel = new javax.swing.JLabel();
        taskDetailsLabel = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        clockLabel = new javax.swing.JLabel();
        backgroundLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setUndecorated(true);
        setType(java.awt.Window.Type.UTILITY);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        maximizeLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        maximizeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                maximizeLabelMouseClicked(evt);
            }
        });
        getContentPane().add(maximizeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 0, 20, 20));

        addLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        addLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addLabelMouseClicked(evt);
            }
        });
        getContentPane().add(addLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 20, 20));

        closeLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        closeLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        closeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeLabelMouseClicked(evt);
            }
        });
        getContentPane().add(closeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 0, 20, 20));

        minimizeLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        minimizeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimizeLabelMouseClicked(evt);
            }
        });
        getContentPane().add(minimizeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 0, 20, 20));

        taskTimeLeftLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        taskTimeLeftLabel.setForeground(new java.awt.Color(0, 153, 0));
        taskTimeLeftLabel.setText("0 Hour 14 min 44sec");
        getContentPane().add(taskTimeLeftLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 220, 30));

        taskDetailsLabel.setFont(new java.awt.Font("Vrinda", 1, 12)); // NOI18N
        taskDetailsLabel.setText("9:00>>12:30 Islamic Book Reading Online");
        getContentPane().add(taskDetailsLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 220, 30));

        startButton.setBackground(new java.awt.Color(204, 255, 0));
        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        getContentPane().add(startButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 30, -1, -1));

        stopButton.setBackground(new java.awt.Color(204, 255, 0));
        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        getContentPane().add(stopButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 60, -1, -1));

        clockLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        clockLabel.setForeground(new java.awt.Color(255, 255, 255));
        clockLabel.setText("16-Jun-2016:4-27-50");
        getContentPane().add(clockLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 0, 170, 20));

        backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/timer/pictures/backgroundImage_linux.gif"))); // NOI18N
        backgroundLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        backgroundLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                backgroundLabelMouseDragged(evt);
            }
        });
        backgroundLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                backgroundLabelMousePressed(evt);
            }
        });
        getContentPane().add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 300, 100));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeLabelMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_closeLabelMouseClicked

    private void maximizeLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_maximizeLabelMouseClicked
        // TODO add your handling code here:
        updateTaskTimerRecords();
        if (!this.timer.isRunning()) {
            TaskTimer.activeTaskId = 0;
        }
        if (this.timer.isRunning()) {
            this.timer.stop();
        }
        if (this.clockTimer.isRunning()) {
            this.clockTimer.stop();
        }
        TaskTimer taskTimer = new TaskTimer();
        taskTimer.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_maximizeLabelMouseClicked

    private void addLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addLabelMouseClicked
        // TODO add your handling code here:
        AddTaskTimer addTaskTimer = new AddTaskTimer();
        addTaskTimer.setVisible(true);
        //this.dispose();
    }//GEN-LAST:event_addLabelMouseClicked

    private void backgroundLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backgroundLabelMousePressed
        // TODO add your handling code here:
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_backgroundLabelMousePressed

    private void backgroundLabelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backgroundLabelMouseDragged
        // TODO add your handling code here:
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();

        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_backgroundLabelMouseDragged

    private void minimizeLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeLabelMouseClicked
        // TODO add your handling code here:
        updateTaskTimerRecords();
        if (this.timer.isRunning()) {
            this.timer.stop();
        }
        if (this.clockTimer.isRunning()) {
            this.clockTimer.stop();
        }

        TinyTimer tinyTimer = new TinyTimer();
        tinyTimer.setVisible(true);

        this.dispose();
    }//GEN-LAST:event_minimizeLabelMouseClicked

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        // TODO add your handling code here:
        if (this.timer.isRunning()) {
            System.out.println("Timer stopped!");
            timer.stop();
            TaskTimer.isTimerStop = true;
            startButton.setEnabled(true);
            stopButton.setEnabled(false);
        }
    }//GEN-LAST:event_stopButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // TODO add your handling code here:
        if (!this.timer.isRunning()) {
            timer.start();
            TaskTimer.isTimerStop = false;
            System.out.println("Timer started!");
            this.startButton.setEnabled(false);
            this.stopButton.setEnabled(true);
        }
    }//GEN-LAST:event_startButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    /* public static void main(String args[]) {
        /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
 /*        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SmallTimerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SmallTimerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SmallTimerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SmallTimerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
 /* java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SmallTimerFrame().setVisible(true);
            }
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addLabel;
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JLabel clockLabel;
    private javax.swing.JLabel closeLabel;
    private javax.swing.JLabel maximizeLabel;
    private javax.swing.JLabel minimizeLabel;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JLabel taskDetailsLabel;
    private javax.swing.JLabel taskTimeLeftLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        // System.out.println("Small Timer Frame timer action.");
        if (taskTimeLeft <= 0) {
            taskTimeLeft = 0;
            if (timer.isRunning()) {
                System.out.println("timer stopping...");
                timer.stop();
            }

            if (taskDetailsLabel.getText().contains("shutdown") || taskDetailsLabel.getText().contains("Shutdown")) {
                try {
                    this.shutdown();
                } catch (RuntimeException ex) {
                    Logger.getLogger(SmallTimerFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(SmallTimerFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        min = taskTimeLeft / 60;
        sec = taskTimeLeft % 60;
        hr = min / 60;
        if (min >= 60) {
            min = min % 60;
        }
        Double ratio = (Double.parseDouble(taskTimeLeft.toString()) / Double.parseDouble(totalTimeLimit.toString())) * 100;

        if (ratio >= 50 && ratio < 75) {
            taskTimeLeftLabel.setForeground(Color.blue);
        } else if (ratio >= 25 && ratio < 50) {
            taskTimeLeftLabel.setForeground(Color.yellow);
        } else if (ratio > 0 && ratio < 25) {
            taskTimeLeftLabel.setForeground(Color.red);
        }

        // System.out.println(ratio);
        this.taskTimeLeftLabel.setText(hr.toString() + " Hour " + min.toString() + " min " + sec.toString() + "sec");

        this.taskTimeLeft--;
        counter++;
        Calendar today = Calendar.getInstance();
        DateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy : h-m-s");

        this.clockLabel.setText(dateFormat.format(today.getTime()));
        if (counter >= 20) {
            this.counter = 0;
            // this.update
            this.updateTaskTimerRecords();
        }
        if (taskTimeLeft <= 0) {
            this.updateTaskTimerRecords();
//            if (!this.timer.isRunning()) {
//                System.out.println("No Active Tasks.");
//                TaskTimer.activeTaskId = 0;
//            }
//            TaskTimer taskTimer = new TaskTimer();
//            taskTimer.setVisible(true);
//            this.dispose();
        }
    }

    public static void shutdown() throws RuntimeException, IOException {
        String shutdownCommand;
        String operatingSystem = System.getProperty("os.name");
        System.out.println(operatingSystem);

        if (operatingSystem.contains("Linux") || operatingSystem.contains("Mac OS X")) {
            shutdownCommand = "shutdown -h now";
        } else if (operatingSystem.contains("Windows")) {
            shutdownCommand = "shutdown.exe -s -t 0";
        } else {
            throw new RuntimeException("Unsupported operating system.");
        }

        Runtime.getRuntime().exec(shutdownCommand);
        System.exit(0);
    }
}
