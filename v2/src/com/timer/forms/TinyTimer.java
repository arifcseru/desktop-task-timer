/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.timer.forms;

import com.timer.db.TaskTimerDBOperation;
import com.timer.tos.TaskTimerTO;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.Timer;

/**
 *
 * @author BDTUNE
 */
public class TinyTimer extends javax.swing.JFrame implements ActionListener{

    /**
     * Creates new form TinyTimer
     */
    int xMouse;
    int yMouse;
    int counter = 0;
    Integer taskTimeLeft;
    
    
    Timer timer = new Timer(1000, (ActionListener) this);
    Integer timeLimit;
    Integer min;
    Integer sec;
    Integer hr;
    TaskTimerDBOperation bOperation = new TaskTimerDBOperation();
        List <TaskTimerTO>taskTimerTOList;
    Integer selectedTaskId = TaskTimer.activeTaskId;
    public TinyTimer() {
        initComponents();//(int) (Toolkit.getDefaultToolkit().getScreenSize().getHeight()-200)
       // this.setSize(300, 50);
        this.setLocation((int) (Toolkit.getDefaultToolkit().getScreenSize().getWidth()/2-100), 0);
       taskTimerTOList = bOperation.retrieveLastFiveTasks();
        
        
        System.out.println("Sel: "+selectedTaskId);
        if (selectedTaskId!=0 && TaskTimer.isTimerStop == false) {
            this.taskTimeLeft = this.taskTimerTOList.get(selectedTaskId-1).getTimeLimit();
            
           timer.start(); 
        }/*else{
            selectedTaskId = 1;
            this.taskTimeLeft = this.taskTimerTOList.get(selectedTaskId-1).getTimeLimit();
            
        }*/
        if (TaskTimer.toBeActivatedTheme.equalsIgnoreCase("windows")) {
            backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/timer/pictures/tinyTimer_linux.gif")));
        }else{
         backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/timer/pictures/tinyTimer.gif"))); // NOI18N
       
        }
   }
    private void updateTaskTimerRecords() {
        if (taskTimerTOList!=null) {
            taskTimerTOList.get(TaskTimer.activeTaskId-1).setTimeLimit(taskTimeLeft);
            bOperation.updateTasks(taskTimerTOList);
        }
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        taskTimeLeftLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        backgroundLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        setMinimumSize(new java.awt.Dimension(150, 25));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(150, 29));
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        taskTimeLeftLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        taskTimeLeftLabel.setForeground(new java.awt.Color(204, 0, 204));
        taskTimeLeftLabel.setText("--h --m --s");
        getContentPane().add(taskTimeLeftLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, 100, 10));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 0, 204));
        jLabel3.setText("rem.. ");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 40, 10));

        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 0, 20, 10));

        backgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/timer/pictures/tinyTimer_linux.gif"))); // NOI18N
        backgroundLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                backgroundLabelMouseDragged(evt);
            }
        });
        backgroundLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                backgroundLabelMousePressed(evt);
            }
        });
        getContentPane().add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 150, 30));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backgroundLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backgroundLabelMousePressed
        // TODO add your handling code here:
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_backgroundLabelMousePressed

    private void backgroundLabelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backgroundLabelMouseDragged
        // TODO add your handling code here:
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        
        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_backgroundLabelMouseDragged

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        SmallTimerFrame smallTimerFrame = new SmallTimerFrame();
        smallTimerFrame.setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_jLabel2MouseClicked

    /**
     * @param args the command line arguments
     */
    //public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
/*        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TinyTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TinyTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TinyTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TinyTimer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
       /* java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TinyTimer().setVisible(true);
            }
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel taskTimeLeftLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
    
         if (taskTimeLeft<=0) {
            taskTimeLeft = 0;
            timer.stop();
        }
        this.taskTimeLeft--;
        min = taskTimeLeft/60;
        sec = taskTimeLeft%60;
        hr = min/60;
        if (min>=60) {
         min = min %60; 
         }
        this.taskTimeLeftLabel.setText(hr.toString()+" h "+min.toString()+" m "+sec.toString()+"s");
        
        counter++;
        if (counter>=20) {
            this.counter = 0;
           // this.update
            this.updateTaskTimerRecords();
        }
    }
}
